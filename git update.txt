Index.cshtml
<header>
    <nav>
        <ul>
            <li>
                <a class="nav-link text-dark" asp-area="" asp-controller="Account" asp-action="Login">Login</a>
                <a class="nav-link text-dark" asp-area="" asp-controller="Account" asp-action="Signup">Signup</a>
                <a class="nav-link text-dark" asp-area="" asp-controller="Account" asp-action="Logout">Logout</a>
            </li>
        </ul>
    </nav>
</header>

User.cs
namespace CopyApp.Models
{
    public class User
    {
        public int Id { get; set; }
        public string Username { get; set; }
    }
}

Repository.cs
namespace CopyApp.Models
{
    public class Repository
    {
        public int DocumentId { get; set; }
        public string OwnerUsername { get; set; }

    }
}

Order.cs
using System.ComponentModel.DataAnnotations.Schema;

namespace CopyApp.Models
{
    [Table("Order")]
    public class Order
    {
        public int Id { get; set; }
        public int DocumentId { get; set; }
        public int Copies { get; set; }
        public bool OneSided { get; set; }
        public bool Color { get; set; }
        public float Price { get; set; }
        public bool Completed { get; set; }

    }
}

Document.cs
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;

namespace CopyApp.Models
{
    [Table("Document")]
    public class Document
    {
        public int Id { get; set; }
        [StringLength(255)]
        [Required(ErrorMessage = "")]
        public string Title { get; set; }
        [StringLength(127)]
        public string Author { get; set; }
        public int PageCount { get; set; }
        public string FileType { get; set; }
    }
}

appsettings.json
"Auth0": {
  "Domain": "dev-egnoq8lnbnbaybje.us.auth0.com",
  "ClientId": "Ig8DTocbPc7MFKHokJw3ZPuKjiyzHtwu"
},
"ConnectionStrings": {
  "CopyAppDBConnection": "Host=dpg-cuqbbrtds78s739am08g-a.frankfurt-postgres.render.com; Database=copyappdb; Username=andrija; Password=g8OVeCEYE4vJV6Lj6QYN4enubKGh9tuT"
}

AccountController.cs
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Auth0.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;

public class AccountController : Controller
{
    public async Task Login(string returnUrl = "/")
    {
        var authenticationProperties = new LoginAuthenticationPropertiesBuilder()
          // Indicate here where Auth0 should redirect the user after a login.
          // Note that the resulting absolute Uri must be added to the
          // **Allowed Callback URLs** settings for the app.
          .WithRedirectUri(returnUrl)
          .Build();

        await HttpContext.ChallengeAsync(
          Auth0Constants.AuthenticationScheme,
          authenticationProperties
        );
    }

    [Authorize]
    public IActionResult Profile()
    {
        return View(new
        {
            Name = User.Identity.Name,
            EmailAddress = User.Claims
            .FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value,
            ProfileImage = User.Claims
            .FirstOrDefault(c => c.Type == "picture")?.Value
        });
    }

    [Authorize]
    public async Task Logout()
    {
        var authenticationProperties = new LogoutAuthenticationPropertiesBuilder()
        // Indicate here where Auth0 should redirect the user after a logout.
        // Note that the resulting absolute Uri must be added to the
        // **Allowed Logout URLs** settings for the app.
          .WithRedirectUri(Url.Action("Index", "Home"))
          .Build();

        // Logout from Auth0
        await HttpContext.SignOutAsync(
          Auth0Constants.AuthenticationScheme,
          authenticationProperties
        );
        // Logout from the application
        await HttpContext.SignOutAsync(
          CookieAuthenticationDefaults.AuthenticationScheme
        );
    }
}